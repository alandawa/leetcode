48. Rotate Image 
48. 旋轉圖像

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
您將獲得一個 n x n 代表圖像的 2D matrix ，將圖像旋轉 90 度（順時針）。

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
您必須就地旋轉圖像，這意味著您必須直接修改輸入的 2D 矩陣。不要分配另一個 2D 矩陣並進行旋轉。
----------------------------------------------------
你提供的代碼意圖是將一個二維矩陣旋轉 90 度，但存在幾個問題。具體而言：

1. `matrix.clone()` 只是淺拷貝，對於二維矩陣，這樣的複製方式無法正確複製矩陣中的元素。
2. `rotate` 方法的返回類型為 `void`，但在代碼中有 `return matrix;` 語句，這會導致編譯錯誤。
3. 旋轉矩陣 90 度的實際過程應該涉及轉置矩陣，然後反轉每一行，而不是直接將矩陣內容複製到 `rotatematrix`。

以下是修正後的 `rotate` 方法，這會正確地將矩陣旋轉 90 度：

```java
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;

        // 1. 轉置矩陣
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) { // 注意這裡的 j 起始於 i  ij互換
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }

        // 2. 反轉每一行            行顛倒所以/2
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n - 1 - j];
                matrix[i][n - 1 - j] = temp;
            }
        }
    }
}
```

### 說明：

1. **轉置矩陣**：
   - 這一步交換 `matrix[i][j]` 和 `matrix[j][i]` 的值。
   - 注意 `j` 從 `i` 開始而不是 0，以避免重新設置已經交換過的值。

2. **反轉每一行**：
   - 對每一行進行反轉。這一步將矩陣的每一行進行左右對稱交換，以完成 90 度順時針旋轉。

### 例子：
如果原始矩陣是：
```
1 2 3
4 5 6
7 8 9
```
旋轉後的矩陣將變成：
```
7 4 1
8 5 2
9 6 3
```

### 如何使用：
- 創建 `Solution` 類的實例，然後調用 `rotate` 方法來旋轉矩陣。

```java
public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        solution.rotate(matrix);

        // 打印結果
        for (int[] row : matrix) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}
```

這樣，矩陣會被正確地旋轉並打印出來。希望這個修正和解釋對你有幫助！如果有任何其他問題，隨時告訴我。