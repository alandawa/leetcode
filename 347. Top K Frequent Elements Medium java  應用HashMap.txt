
347. Top K Frequent Elements
347. Top K 常見元素



Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
給定一個整數陣列 nums 和一個整數 k ，返回 k 最常見的元素。您可以按任何順序返回答案。
------------------------------------------------------------

當然可以！讓我們一步一步地解釋這個解決方案：

### 1. 問題說明

要找出一個數組中最常出現的 `k` 個元素，我們需要：

1. **計算每個元素的頻率**。
2. 根據頻率**排序**這些元素。
3. **提取**頻率最高的 `k` 個元素。

### 2. 完整的解決方案

這裡提供了一個完整的 Java 程式碼來解決這個問題：

```java
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // 第一步：計算每個數字的頻率
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // 第二步：使用最大堆來追蹤前 k 個頻繁的元素
        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
            new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());
        
        maxHeap.addAll(frequencyMap.entrySet());

        // 第三步：提取前 k 個元素
        int[] topK = new int[k];
        for (int i = 0; i < k; i++) {
            topK[i] = maxHeap.poll().getKey();
        }

        return topK;
    }
}
```

### 解釋

1. **計算頻率**：
   - 我們使用 `HashMap` 來計算每個元素出現的頻率。`frequencyMap` 的鍵（key）是數字，值（value）是這個數字的頻率。

2. **使用最大堆**：
   - `PriorityQueue` 被用作最大堆來追蹤最頻繁的 `k` 個元素。我們自定義了一個比較器，使得頻率較高的元素具有較高的優先級。這樣，頻率最高的元素會被放在堆頂。

3. **提取前 `k` 個元素**：
   - 我們從最大堆中提取 `k` 個元素，這些元素就是頻率最高的 `k` 個元素。

### 額外的注意事項

- **邊界情況**：
  - 如果 `k` 大於數組中的唯一元素數量，需要處理這種情況。通常，我們會假設 `k` 不會超過唯一元素的數量。

- **時間複雜度**：
  - 構建頻率圖的時間複雜度是 \(O(n)\)，其中 `n` 是數組的元素數量。
  - 插入元素到最大堆的時間複雜度是 \(O(n \log n)\)。
  - 提取 `k` 個元素的時間複雜度是 \(O(k \log n)\)。但由於堆操作的主導作用，總的複雜度是 \(O(n \log n)\)。

這個解決方案應該能夠有效地解決找出最常出現的 `k` 個元素的問題。如果有任何其他問題或需要進一步解釋，隨時告訴我！