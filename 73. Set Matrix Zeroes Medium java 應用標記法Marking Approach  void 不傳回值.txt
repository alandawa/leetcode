73. Set Matrix Zeroes

73. 設置矩陣零
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
給定一個 m x n 整數矩陣矩陣，如果元素為 0，則將其整行整列設置為 0。

You must do it in place.
你必須做到到位。
-----------------------------------------------------------------------
當然，下面是使用繁體中文的說明和代碼：

### 問題描述

給定一個 `m x n` 的矩陣，若矩陣中的某個位置的數字為零，則將該行和該列中的所有元素都設為零。請設計一個方法來完成這個操作，並且要儘可能地減少空間複雜度。

### 解決方案

我們可以通過以下步驟來解決這個問題：

1. **標記需要置零的行和列**：
   - 使用矩陣的第一行和第一列來標記需要置零的行和列。這樣可以避免使用額外的空間來存儲這些標記。

2. **根據標記來置零**：
   - 根據在第一行和第一列的標記，將相應的行和列中的所有元素設為零。

3. **特殊處理第一行和第一列**：
   - 由於第一行和第一列用於標記，我們需要單獨處理這些行和列，避免覆蓋標記信息。

### 碼例

以下是上述解決方案的 Java 代碼實現：

```java
class Solution {
    public void setZeroes(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        // 變量來檢查是否需要將第一行和第一列置為零
        boolean zeroFirstRow = false;
        boolean zeroFirstCol = false;
        
        // 檢查第一行是否包含零
        for (int c = 0; c < cols; c++) {
            if (matrix[0][c] == 0) {
                zeroFirstRow = true;
                break;
            }
        }
        
        // 檢查第一列是否包含零
        for (int r = 0; r < rows; r++) {
            if (matrix[r][0] == 0) {
                zeroFirstCol = true;
                break;
            }
        }
        
        // 使用第一行和第一列來標記其他單元格的零
        for (int r = 1; r < rows; r++) {
            for (int c = 1; c < cols; c++) {
                if (matrix[r][c] == 0) {
                    matrix[r][0] = 0;  // 標記當前行的第一列
                    matrix[0][c] = 0;  // 標記當前列的第一行
                }
            }
        }
        
        // 根據第一行和第一列的標記來置零
        for (int r = 1; r < rows; r++) {
            for (int c = 1; c < cols; c++) {
                if (matrix[r][0] == 0 || matrix[0][c] == 0) {
                    matrix[r][c] = 0;
                }
            }
        }
        
        // 如果第一行需要置零，則將第一行的所有元素置為零
        if (zeroFirstRow) {
            for (int c = 0; c < cols; c++) {
                matrix[0][c] = 0;
            }
        }
        
        // 如果第一列需要置零，則將第一列的所有元素置為零
        if (zeroFirstCol) {
            for (int r = 0; r < rows; r++) {
                matrix[r][0] = 0;
            }
        }
    }
}
```

### 關鍵點：

1. **標記零**：
   - 利用第一行和第一列來標記需要置零的行和列，這樣可以避免使用額外的空間。

2. **處理特殊情況**：
   - 單獨處理第一行和第一列，以防止在標記過程中丟失信息。

3. **時間複雜度**：
   - 這種方法的時間複雜度為 O(m * n)，其中 `m` 和 `n` 分別是矩陣的行數和列數。這是因為我們會遍歷矩陣幾次，但每次遍歷都是線性的。

4. **空間複雜度**：
   - 空間複雜度為 O(1)，因為我們使用了矩陣本身來標記，沒有使用額外的空間。

希望這段代碼和說明對你有幫助。如果還有其他問題，隨時告訴我！
-------------------------------------------------------
這種方法被稱為 **"標記法"（Marking Approach）**，它是一種有效的矩陣處理技術，尤其在處理需要修改整個行或列的問題時特別有用。這種方法的核心思想是利用已有的數據來進行標記，從而避免使用額外的空間。

### 標記法的應用

在這個問題中，我們的目標是將矩陣中的某些行和列設為零，當矩陣中的某個元素為零時，整個行和列都應設為零。標記法的基本步驟如下：

1. **標記需要修改的行和列**：
   - 使用矩陣的第一行和第一列來記錄哪些行和列需要被置為零。這樣可以避免使用額外的空間來存儲標記信息。

2. **根據標記修改矩陣**：
   - 遍歷矩陣，根據第一行和第一列的標記來修改其他單元格的值，將那些標記的行和列中的所有元素設為零。

3. **處理標記行和列的特殊情況**：
   - 由於第一行和第一列也用來做標記，因此在最終處理時需要單獨處理這些行和列。

### 優點

1. **空間效率**：
   - 該方法的空間複雜度為 O(1)，因為只使用了原矩陣來進行標記，避免了額外的空間開銷。

2. **時間效率**：
   - 雖然這個方法的時間複雜度是 O(m * n)，其中 `m` 和 `n` 分別是矩陣的行數和列數，但這是最有效的線性時間複雜度解法之一，尤其適合這類矩陣處理問題。

### 適用情境

標記法適合用於處理以下類型的問題：

1. **需要修改整行或整列的矩陣問題**：
   - 比如這道題目中的矩陣置零問題。

2. **不希望使用額外的空間**：
   - 標記法允許在原地（in-place）進行修改，對於空間複雜度有限制的情境特別有用。

### 類似的問題

1. **矩陣旋轉**：例如，將一個 `n x n` 矩陣旋轉 90 度的問題。
2. **行列反轉**：例如，將矩陣的行和列進行反轉。

使用標記法可以在處理這些問題時有效地利用現有的數據，避免額外的存儲和計算開銷。希望這幫助你理解標記法的應用！如果有其他問題或需要進一步的解釋，隨時告訴我。