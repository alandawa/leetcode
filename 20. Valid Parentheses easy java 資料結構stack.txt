20. Valid Parentheses
20. 有效括弧
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
給定一個僅包含字元 '（'， '）'、'{'、'}'、'[' 和 ']' 的字串 s，確定輸入字串是否有效。

An input string is valid if:
在以下情況下，輸入字串有效：

Open brackets must be closed by the same type of brackets.
打開的括號必須用相同類型的括弧封閉。
Open brackets must be closed in the correct order.
左括弧必須按正確的順序閉合。
Every close bracket has a corresponding open bracket of the same type.
每個右括弧都有一個相同類型的對應的右右括弧。


-------------------------------------------------------





class Solution {

    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for (char c : s.toCharArray()) {
            if (c == '(' || c == '[' || c == '{') {
                stack.push(c);
            } else if (c == ')' && !stack.isEmpty() && stack.peek() == '(') {
                stack.pop();
            } else if (c == ']' && !stack.isEmpty() && stack.peek() == '[') {
                stack.pop();
            } else if (c == '}' && !stack.isEmpty() && stack.peek() == '{') {
                stack.pop();
            } else {
                return false; // 遇到無效的右括號或者無法匹配的情況
            }
        }

        return stack.isEmpty(); // 堆疊應該為空才是有效的括號組合
    }
    }

----------------------------------------------------------------------------------
是的，您的理解是正確的。讓我來逐步確認一下這個算法的執行流程：

### 算法流程

1. **初始化堆疊 `stack` 為空：**

   ```plaintext
   stack = []
   ```

2. **遍歷字符串中的每個字符：**

   - 如果遇到左括號 `(`、`[`、`{`，則將其壓入堆疊 `stack` 中。
   - 如果遇到右括號 `)`、`]`、`}`：
     - 檢查堆疊 `stack` 是否為空，如果為空則直接返回 `false`，因為此時沒有左括號可以與之匹配。
     - 否則，從堆疊 `stack` 中彈出頂部的左括號。
       - 如果彈出的左括號與當前右括號不匹配（例如 `(` 對應 `]`），則返回 `false`。
   - 如果所有字符處理完畢後，堆疊 `stack` 應該為空，如果不是空的，則返回 `false`。

3. **最終返回值：**

   - 如果遍歷結束後堆疊 `stack` 為空，表示所有的左括號都有正確的右括號與之匹配，則返回 `true`。
   - 否則，返回 `false`。

這樣的設計確保了括號序列的正確性：
- 當遇到右括號時，會與最近壓入堆疊的左括號進行匹配。
- 如果匹配成功，則將左括號從堆疊中彈出。
- 如果匹配失敗（即右括號與堆疊頂部的左括號不匹配），則直接返回 `false`。
- 最終檢查堆疊是否為空，以確保所有的左括號都有合適的右括號與之匹配。

這樣的算法保證了對括號序列的有效性檢查，符合您描述的處理邏輯。希望這次的解釋能夠幫助您更好地理解括號匹配問題！