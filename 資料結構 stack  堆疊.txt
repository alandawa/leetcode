讓我們使用字符串 `s2 = "()[]{}"` 來展示堆疊的操作和狀態變化。

### 初始狀態：

```
   +---+
0  |   |
   +---+
```

堆疊最初是空的，沒有任何元素。

### Push 操作：

將字符串 `s2` 中的每個字符依次推入堆疊的頂部。

1. Push '('：
```
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

2. Push ')'：
```
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

3. Push '['：
```
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

4. Push ']'：
```
   +---+
4  | ] |
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

5. Push '{'：
```
   +---+
5  | { |
   +---+
4  | ] |
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

6. Push '}'：
```
   +---+
6  | } |
   +---+
5  | { |
   +---+
4  | ] |
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

### Pop 操作：

按照後進先出（LIFO）的原則，從堆疊的頂部依次彈出元素。

1. Pop '}'：
```
   +---+
5  | { |
   +---+
4  | ] |
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

2. Pop '{'：
```
   +---+
4  | ] |
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

3. Pop ']'：
```
   +---+
3  | [ |
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

4. Pop '['：
```
   +---+
2  | ) |
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

5. Pop ')'：
```
   +---+
1  | ( |
   +---+
0  |   |
   +---+
```

6. Pop '('：
```
   +---+
0  |   |
   +---+
```

### 堆疊的狀態變化：

在這個示意圖中，我們展示了堆疊在進行push和pop操作後的狀態變化：

- **初始狀態**：
  堆疊是空的。

- **Push 操作**：
  我們依次將字符串 `s2 = "()[]{}"` 中的字符推入堆疊的頂部。

- **Pop 操作**：
  我們按照後進先出的原則，從堆疊的頂部依次彈出元素。

這種示意圖能夠幫助理解堆疊在處理不同類型括號時的工作原理和狀態變化。堆疊以後進先出的方式管理這些元素，這是其基本特性之一。